// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// wle
IntegerVector wle(NumericVector counts, int act_thresh, int spike_tol, int spike_stop);
RcppExport SEXP _actigraph_sleepr_wle(SEXP countsSEXP, SEXP act_threshSEXP, SEXP spike_tolSEXP, SEXP spike_stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< int >::type act_thresh(act_threshSEXP);
    Rcpp::traits::input_parameter< int >::type spike_tol(spike_tolSEXP);
    Rcpp::traits::input_parameter< int >::type spike_stop(spike_stopSEXP);
    rcpp_result_gen = Rcpp::wrap(wle(counts, act_thresh, spike_tol, spike_stop));
    return rcpp_result_gen;
END_RCPP
}
// overlap
LogicalVector overlap(IntegerVector start, IntegerVector end);
RcppExport SEXP _actigraph_sleepr_overlap(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(overlap(start, end));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_actigraph_sleepr_wle", (DL_FUNC) &_actigraph_sleepr_wle, 4},
    {"_actigraph_sleepr_overlap", (DL_FUNC) &_actigraph_sleepr_overlap, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_actigraph_sleepr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
